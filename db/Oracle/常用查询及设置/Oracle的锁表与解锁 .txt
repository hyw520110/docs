Oracle的锁表与解锁   
SELECT /*+ rule */ s.username,
decode(l.type,'TM','TABLE LOCK',
'TX','ROW LOCK',
NULL) LOCK_LEVEL,
o.owner,o.object_name,o.object_type,
s.sid,s.serial#,s.terminal,s.machine,s.program,s.osuser
FROM v$session s,v$lock l,dba_objects o
WHERE l.sid = s.sid
AND l.id1 = o.object_id(+)
AND s.username is NOT Null

--kill session语句
alter system kill session'50,492';
--以下几个为相关表
SELECT * FROM v$lock;
SELECT * FROM v$sqlarea;
SELECT * FROM v$session;
SELECT * FROM v$process ;
SELECT * FROM v$locked_object;
SELECT * FROM all_objects;
SELECT * FROM v$session_wait;
--1.查出锁定object的session的信息以及被锁定的object名
SELECT l.session_id sid, s.serial#, l.locked_mode,l.oracle_username,
l.os_user_name,s.machine, s.terminal, o.object_name, s.logon_time
FROM v$locked_object l, all_objects o, v$session s
WHERE l.object_id = o.object_id
AND l.session_id = s.sid
ORDER BY sid, s.serial# ;
--2.查出锁定表的session的sid, serial#,os_user_name, machine name, terminal和执行的语句
--比上面那段多出sql_text和action
SELECT l.session_id sid, s.serial#, l.locked_mode, l.oracle_username, s.user#,
l.os_user_name,s.machine, s.terminal,a.sql_text, a.action
FROM v$sqlarea a,v$session s, v$locked_object l
WHERE l.session_id = s.sid
AND s.prev_sql_addr = a.address
ORDER BY sid, s.serial#;
--3.查出锁定表的sid, serial#,os_user_name, machine_name, terminal，锁的type,mode
SELECT s.sid, s.serial#, s.username, s.schemaname, s.osuser, s.process, s.machine,
s.terminal, s.logon_time, l.type
FROM v$session s, v$lock l
WHERE s.sid = l.sid
AND s.username IS NOT NULL
ORDER BY sid;

这个语句将查找到数据库中所有的DML语句产生的锁，还可以发现，
任何DML语句其实产生了两个锁，一个是表锁，一个是行锁。
杀锁命令
alter system kill session 'sid,serial#'
SELECT /*+ rule */ s.username,
decode(l.type,'TM','TABLE LOCK',
'TX','ROW LOCK',
NULL) LOCK_LEVEL,
o.owner,o.object_name,o.object_type,
s.sid,s.serial#,s.terminal,s.machine,s.program,s.osuser
FROM v$session s,v$lock l,dba_objects o
WHERE l.sid = s.sid
AND l.id1 = o.object_id(+)
AND s.username is NOT NULL
如果发生了锁等待，我们可能更想知道是谁锁了表而引起谁的等待
以下的语句可以查询到谁锁了表，而谁在等待。
以上查询结果是一个树状结构，如果有子节点，则表示有等待发生。
如果想知道锁用了哪个回滚段，还可以关联到V$rollname，其中xidusn就是回滚段的USN
col user_name format a10
col owner format a10
col object_name format a10
col object_type format a10
SELECT /*+ rule */ lpad(' ',decode(l.xidusn ,0,3,0))||l.oracle_username User_name,
o.owner,o.object_name,o.object_type,s.sid,s.serial#
FROM v$locked_object l,dba_objects o,v$session s
WHERE l.object_id=o.object_id
AND l.session_id=s.sid
ORDER BY o.object_id,xidusn DESC








Oracle session连接数和inactive
从上周起，办事器Oracle数据库呈现题目，用不到半天，就会报maxsession（150）的题目，必然是数据库的会话跨越最大数了。 
  因为办事器跑的是文件传输应用，占用的恳乞降会话必然很大，是以用户数不大就已经让oracle的会话数达到最大值。 
  处理惩罚体式格式不过乎两种：扩大oracle最大session数以及清除inactive会话，当然还有，就是从数据库连接池和法度bug上方下手。 

从遍地收集了一些查看当前会话的语句，记录一下： 

1. count（*） v￥session； 
  count（*） v￥process； 
  查看当前总会话数和过程数，这两个视图就是跟会话及过程有关的首要视图啦，信息都是从这里面取的。 

2.查询那些应用的连接数此时是几许 
  b.MACHINE， b.PROGRAM ， count（*） v￥process a， v￥session b where a.ADDR = b.PADDR and  b.USERNAME is not null   group by  b.MACHINE  ， b.PROGRAM order by count（*） desc; 

3.查询是否有死锁 
* v￥locked_object; 
若是查询成果为no rows ed，申明数据库中没有死锁。不然申明数据库中存在死锁。 


接下来申明一下会话的状况： 
1.active 处于此状况的会话，默示正在履行，处于活动状况。 
2.killed 处于此状况的会话，默示呈现了错误，正在回滚，当然，也是占用体系资料的。还有一点就是，killed的状况一般会连气儿较长时候，并且用windows下的对象pl/sql developer来kill掉，是不管用的，要用号令：alter system kill session ""sid，serial＃"" ; 
3.inactive 处于此状况的会话默示不是正在履行的，比如语句已经完成。我一开端认为，只如果inactive状况的会话，就是该杀，为什么不开释呢。其实，inactive对数据库本身没有什么影响，然则若是法度没有及时commit，那么就会造成占用过多会话。解决inactive的办法最好的就是在oracle中直接设置超不时候，也是有两种办法，差别临时还不清楚： 

1.批改sqlnet.ora文件，新增expire_time=x（单位是分钟）   
我的sqlnet.ora地位在D:\oracle\ora92\network\admin



sqlnet.expire_time = xx 的意思是若是 xx秒没有连接上数据库就会通知你连接超时，而不是主动断开超时连接。

2.经由过程ALTER PROFILE DEFAULT LIMIT IDLE_TIME 10; 号令批改，记得重启下oracle。



对应的用户的profile（概要文件）设置~，调查响应的文档里面有如何建树你所须要的profile.

ALTER PROFILE "DEFAULT" 
    LIMIT IDLE_TIME 15
15分钟余暇主动断开


--long time running session
SELECT s1.sid,s1.SERIAL# ,s1.username,totalwork,last_update_time,elapsed_seconds,message
FROM v$session s1, v$session_longops s2
WHERE 
s1.serial#=s2.serial# and s1.sid=s2.sid
and s2.username<>'SYSTEM' and s2.username<>'SYS'
--and elapsed_seconds >20
ORDER BY 6 desc

-- 最耗费CPU资源的TOP 25 SQLs
select * from (
select rank() over(order by buffer_gets desc) as rank_bufgets
,to_char(100 * ratio_to_report(buffer_gets) over(), '999.99') pct_bufgets
,sql_text
from v$sqlarea
) where rownum<26 ;

-----inquery the full SQL statement
SELECT sql_text
FROM v$sqltext a
WHERE a.hash_value = (SELECT sql_hash_value FROM v$session b WHERE b.SID = '&sid')
ORDER BY piece ASC

-----inquery full SQL according to HASH_VALUE
select * from v$sqltext where hash_value='&hash_value'
order by piece

---SESSION _ ID
select sql.sql_text, sess.logon_time, pro.pid "Oracle ProID", sess.sid "SessID",sess.serial#, pro.spid "OS ProID", pro.username "Oracle UsrName", pro.program "Program", 
sess.module "Module", 
sess.username, sess.osuser, sess.machine, sess.terminal, sess.program, sess.type 
from v$process pro,v$session sess , v$sql sql
where pro.addr=sess.paddr 
and sess.sql_address = sql.address(+) 
and sess.sid = &SESSION_ID 

--- ORACLE_ID 
select sql.sql_text, sess.logon_time, pro.pid "Oracle ProID", sess.sid "SessID",pro.spid "OS ProID", pro.username "Oracle UsrName", pro.program "Program", 
sess.module "Module", 
sess.username, sess.osuser, sess.machine, sess.terminal, sess.program, sess.type 
from v$process pro,v$session sess , v$sql sql
where pro.ADDR=sess.paddr 
and sess.sql_address = sql.address (+) -- sql.address = sess.sql_address(+) ?
and pro.pid= &ORACLE_PROCESS_ID 

--- OS_PROCESS_ID 
select sql.sql_text, sess.logon_time, pro.pid "Oracle ProID", sess.sid "SessID",pro.spid "OS ProID", pro.username "Oracle UsrName", pro.program "Program", 
sess.module "Module", 
sess.username, sess.osuser, sess.machine, sess.terminal, sess.program, sess.type 
from v$process pro,v$session sess , v$sql sql
where pro.ADDR=sess.paddr 
and sess.sql_address = sql.address (+) -- sql.address = sess.sql_address(+) ?
and pro.spid = &OS_ID

--- SQL
select sql.SQL_TEXT,sql.BUFFER_GETS , sql.CPU_TIME, sql.DISK_READS,sql.ELAPSED_TIME ,sql.RUNTIME_MEM,sql.EXECUTIONS
,sql.FETCHES,sql.PARSE_CALLS,sql.FIRST_LOAD_TIME,sql.MODULE,sql.OPTIMIZER_COST, sql.OPTIMIZER_MODE,sql.SORTS
, sess.SID , sess.PROGRAM ,SESS.TYPE
from v$sql sql , v$session sess
where
sess.SQL_ADDRESS(+)=sql.ADDRESS 
and upper(sql_text) like '%&sql%'

----- Request_ID

SELECT a.process_status_code,a.oracle_process_id,a.os_process_id,process_start_date FROM FND_CONCURRENT_PROCESSES A , FND_CONCURRENT_REQUESTS B 
WHERE 
B.CONTROLLING_MANAGER=A.CONCURRENT_PROCESS_ID 
AND B.REQUEST_ID='&req_id'


select 'CONC',p.pid,request_id
, p.username OS_NAME
, p.spid
, s.sid
, s.username
, s.serial#
, s.sql_address
,u.user_name
,CONCURRENT_PROGRAM_NAME 
from v$process p
, v$session s
,fnd_concurrent_requests cr
,fnd_user u,fnd_concurrent_programs cp
where 
s.audsid=cr.oracle_session_id --- 如果是oracle report, using the following sql
and cr.REQUESTED_BY = u.user_id
and s.paddr = p.addr
and cp.CONCURRENT_PROGRAM_ID =cr.CONCURRENT_PROGRAM_ID 
and cr.request_id = &REQUESTID

select request_id,STATUS_CODE,PHASE_CODE ,oracle_id,OS_PROCESS_ID, oracle_session_id,concurrent_program_id, printer 
from fnd_concurrent_requests 
where request_id = &REQUEST_ID

----如何查找后台一个正在运行的concurrent reporter SESSION
select sid, serial#,osuser, process, machine, program,module from v$session
where status='ACTIVE'
AND SCHEMANAME<>'SYS'
AND UPPER(PROGRAM) LIKE 'AR60RUN%'

----------------------------------------
--- get the form information from os process
select 'FORM', p.pid
, p.username OS_NAME
, p.spid
, s.sid
, s.username
, s.serial#
, s.sql_address
,u.user_name
,f.form_name
,sysdate-lrf.start_time
from v$process p
,v$session s
,fnd_login_resp_forms lrf
,fnd_logins l
,fnd_user u
,fnd_form f
where s.audsid=lrf.audsid
and lrf.login_id = l.login_id
and l.user_id = u.user_id
and lrf.form_id = f.form_id
and s.paddr = p.addr
and p.spid = &OSPROCESS

--- get the concurrent information from os process
select 'CONC',p.pid,request_id
, p.username OS_NAME
, p.spid
, s.sid
, s.username
, s.serial#
, s.sql_address
,u.user_name
,CONCURRENT_PROGRAM_NAME 
from v$process p
, v$session s
,fnd_concurrent_requests cr
,fnd_user u,fnd_concurrent_programs cp
where s.audsid=cr.oracle_session_id
and cr.REQUESTED_BY = u.user_id
and s.paddr = p.addr
and cp.CONCURRENT_PROGRAM_ID =cr.CONCURRENT_PROGRAM_ID 
and p.spid = &OSPROCESS


SELECT r.request_id "Request ID", 
s.sid "Session ID" , 
s.serial# 
FROM applsys.fnd_concurrent_requests r, 
applsys.fnd_concurrent_queues_tl qt, 
applsys.fnd_concurrent_queues q, 
applsys.fnd_concurrent_processes p, 
v$session s 
WHERE r.controlling_manager=p.concurrent_process_id 
AND q.application_id=p.queue_application_id 
AND q.concurrent_queue_id=p.concurrent_queue_id 
AND qt.application_id=q.application_id 
AND qt.concurrent_queue_id=q.concurrent_queue_id 
AND r.phase_code='R' 
AND qt.language in ('ZHS') 
AND p.session_id=s.audsid 

---根据request_id查找是哪个trace file
/* Formatted on 2007/02/16 15:32 (Formatter Plus v4.8.5) */
SELECT fcr.request_id, fcr.concurrent_program_id, fcp.concurrent_program_name,
TO_CHAR (fcr.actual_completion_date, 'DD-MON-YY HH24:MI:SS'),
actual_completion_date, fcr.oracle_process_id,
par_udd.VALUE || '/*' || fcr.oracle_process_id || '*.trc' TRACE
FROM fnd_concurrent_requests fcr,
fnd_concurrent_programs fcp,
v$parameter par_udd
WHERE fcr.concurrent_program_id = fcp.concurrent_program_id
AND LOWER (par_udd.NAME) = 'user_dump_dest'
AND fcr.request_id = 36751549

----根据HASH_VALUE生成执行计划
select '| Operation | PHV/Object Name | Rows | Bytes| Cost |' as "Optimizer Plan:" from dual
union all
select '--------------------------------------------------------------------------------' from dual
union all
select *
from (select rpad('|'||substr(lpad(' ',1*(depth-1))||operation||
decode(options, null,'',' '||options), 1, 32), 33, ' ')||'|'||
rpad(decode(id, 0, '----- '||to_char(hash_value)||' -----'
, substr(decode(substr(object_name, 1, 7), 'SYS_LE_', null, object_name)
||' ',1, 20)), 21, ' ')||'|'||
lpad(decode(cardinality,null,' ',
decode(sign(cardinality-1000), -1, cardinality||' ',
decode(sign(cardinality-1000000), -1, trunc(cardinality/1000)||'K',
decode(sign(cardinality-1000000000), -1, trunc(cardinality/1000000)||'M',
trunc(cardinality/1000000000)||'G')))), 7, ' ') || '|' ||
lpad(decode(bytes,null,' ',
decode(sign(bytes-1024), -1, bytes||' ',
decode(sign(bytes-1048576), -1, trunc(bytes/1024)||'K',
decode(sign(bytes-1073741824), -1, trunc(bytes/1048576)||'M',
trunc(bytes/1073741824)||'G')))), 6, ' ') || '|' ||
lpad(decode(cost,null,' ',
decode(sign(cost-10000000), -1, cost||' ',
decode(sign(cost-1000000000), -1, trunc(cost/1000000)||'M',
trunc(cost/1000000000)||'G'))), 8, ' ') || '|' as "Explain plan"
from v$sql_plan
where hash_value = &hash_value) 
